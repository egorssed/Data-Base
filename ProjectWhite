#include <iostream>
#include <string>
#include <map>
#include <set>
#include <vector>
#include <exception>
#include <sstream>
#include <iomanip>
using namespace std;


class Date {
public:
	Date() {
		year = 0;
		month = 0;
		day = 0;
	}
	Date(const int& y, const int& m, const int& d) {

		if (m>12 || m <1) {
			string error = "Month value is invalid: " + to_string(m);
			throw invalid_argument(error);
		}
		if (d>31 || d <1) {
			string error = "Day value is invalid: " + to_string(d);
			throw invalid_argument(error);
		}
		year = y;
		month = m;
		day = d;
	}
	int GetYear() const {
		return year;
	}
	int GetMonth() const {
		return month;
	}
	int GetDay() const {
		return day;
	}
private:
	int year;
	int month;
	int day;
};

bool operator<(const Date& lhs, const Date& rhs) {
	if (lhs.GetYear() == rhs.GetYear()) {
		if (lhs.GetMonth() == rhs.GetMonth()) {
			return lhs.GetDay()<rhs.GetDay();
		}
		else return lhs.GetMonth()<rhs.GetMonth();
	}
	else return lhs.GetYear()<rhs.GetYear();
}

ostream& operator<<(ostream& stream, const Date& date) {
	if (date.GetYear() >= 0) {
		cout << setw(4) << setfill('0') << date.GetYear()
			<< '-' << setw(2) << setfill('0') << date.GetMonth()
			<< '-' << setw(2) << setfill('0') << date.GetDay();
	}
	else {
		cout << "-" << setw(4) << setfill('0') << -date.GetYear()
			<< '-' << setw(2) << setfill('0') << date.GetMonth()
			<< '-' << setw(2) << setfill('0') << date.GetDay();
	}

	return stream;
}

bool CheckDate(const char& c, bool sw) {
	if (sw) {
		if ((c == '-') || (c == '+') || isdigit(c)) {
			return true;
		}
		else return false;
	}
	else if (isdigit(c)) {
		return true;
	}
	else  return false;
}

void BuildDate(const string& obt, string& year, string& month, string& day) {
	bool AllowSign = true;
	int i = 0;
	int DatePart = 0;
	while (i<obt.size()) {
		if (AllowSign == true) {
			if (!CheckDate(obt[i], true)) {
				string error = "Wrong date format: " + obt;
				throw invalid_argument(error);
			}
			AllowSign = false;
		}
		else {
			if (obt[i] == '-') {
				AllowSign = true;
				if (DatePart == 2) {
					string error = "Wrong date format: " + obt;
					throw invalid_argument(error);
				}
				DatePart++;
				i++;
				continue;
			}
			else {
				if (!CheckDate(obt[i], false)) {
					string error = "Wrong date format: " + obt;
					throw invalid_argument(error);
				}
			}
		}
		if (DatePart == 0) year += obt[i];
		if (DatePart == 1) month += obt[i];
		if (DatePart == 2) day += obt[i];
		i++;
		if (DatePart > 2) {
			string error = "Wrong date format: " + obt;
			throw invalid_argument(error);
		}
	}
	if ((year.size() == 0) || (month.size() == 0) || (day.size() == 0) || (year == "-" || year == "+" || month == "-" || month == "+" || day == "-" || day == "+")) {
		string error = "Wrong date format: " + obt;
		throw invalid_argument(error);
	}
}


istream& operator>>(istream& stream, Date& date) {
	string year, month, day;
	string obt;
	stream >> obt;
	BuildDate(obt, year, month, day);
	int y, m, d;
	y = stoi(year);
	m = stoi(month);
	d = stoi(day);
	date = { y,m,d };
	return stream;
}

class DataBase {
public:
	void AddEvent(const Date& date, const string& event) {
		base[date].insert(event);
	}
	bool DeleteEvent(const Date& date, const string& event) {
		if (base.count(date) > 0) {
			if (base[date].count(event) > 0) {
				base[date].erase(event);
				return true;
			}
		}
		return false;
	}
	int  DeleteDate(const Date& date) {
		if (base.count(date) > 0) {
			int N = base[date].size();
			base.erase(date);
			return N;
		}
		return 0;
	}
	void Find(const Date& date) const {
		if (base.count(date) > 0) {
			set<string> value;
			value = base.at(date);
			for (const auto& i : value) {
				cout << i << endl;
			}
		}
		else  throw invalid_argument("");
	}

	void Print() const {
		for (const auto& list : base) {
			for (const auto& event : list.second) {
				if (list.first.GetYear() >= 0) {
					cout << list.first << " " << event << endl;
				}
			}
		}
	}


private:
	map <Date, set<string>> base;
};



int main() {
	DataBase db;
	string s;
	while (getline(cin, s)) {
		stringstream ObtCommand(s);
		string command;
		string Obtdate;
		string event;
		try {
			ObtCommand >> command;
			if (command == "Add") {
				Date date;
				ObtCommand >> date;
				ObtCommand >> event;
				db.AddEvent(date, event);
				continue;
			}
			if (command == "Del") {
				Date date;
				ObtCommand >> date;
				ObtCommand >> event;
				if (event.size() == 0) {
					int N = db.DeleteDate(date);
					cout << "Deleted " << N << " events" << endl;
				}
				else {
					if (db.DeleteEvent(date, event)) {
						cout << "Deleted successfully" << endl;
					}
					else {
						cout << "Event not found" << endl;
					}
				}
				continue;
			}
			if (command == "Find") {
				Date date;
				ObtCommand >> date;
				db.Find(date);
				continue;
			}
			if (command == "Print") {
				db.Print();
				continue;
			}
			if (command.size() == 0) {
				continue;
			}
			cout << "Unknown command: " << command << endl;
			break;
		}
		catch (invalid_argument& e) {
			cout << e.what() << endl;
			break;
		}
	}
	return 0;
}
